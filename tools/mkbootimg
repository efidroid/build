#!/usr/bin/env python
# Copyright 2015, The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import print_function
from sys import argv, exit, stderr
from argparse import ArgumentParser, FileType, Action
from os import fstat
from struct import pack
from hashlib import sha1
import sys
import re
import os
import ctypes

REPACK_TYPE_FILE = 0
REPACK_TYPE_VALUE_STR = 1
REPACK_TYPE_VALUE_HEX = 2

class Bunch:
    def __init__(self, **kwds):
        self.__dict__.update(kwds)

def filesize(f):
    if f is None:
        return 0
    try:
        return fstat(f.fileno()).st_size
    except OSError:
        return 0


def update_sha(sha, f):
    if f:
        sha.update(f.read())
        f.seek(0)
        sha.update(pack('I', filesize(f)))
    else:
        sha.update(pack('I', 0))


def pad_file(f, padding):
    pad = (padding - (f.tell() & (padding - 1))) & (padding - 1)
    f.write(pack(str(pad) + 'x'))


def write_header(args):
    BOOT_MAGIC = 'ANDROID!'.encode()
    args.output.write(pack('8s', BOOT_MAGIC))
    args.output.write(pack('10I',
        ctypes.c_uint(filesize(args.kernel)).value,                          # size in bytes
        ctypes.c_uint(args.base + args.kernel_offset).value,                 # physical load addr
        ctypes.c_uint(filesize(args.ramdisk)).value,                         # size in bytes
        ctypes.c_uint(args.base + args.ramdisk_offset).value,                # physical load addr
        ctypes.c_uint(filesize(args.second)).value,                          # size in bytes
        ctypes.c_uint(args.base + args.second_offset).value,                 # physical load addr
        ctypes.c_uint(args.base + args.tags_offset).value,                   # physical addr for kernel tags
        ctypes.c_uint(args.pagesize).value,                                  # flash page size we assume
        ctypes.c_uint(filesize(args.dt)).value,                              # size in bytes
        ctypes.c_uint((args.os_version << 11) | args.os_patch_level).value)) # os version and patch level
    args.output.write(pack('16s', args.board.encode())) # asciiz product name
    args.output.write(pack('512s', args.cmdline[:512].encode()))

    sha = sha1()
    update_sha(sha, args.kernel)
    update_sha(sha, args.ramdisk)
    update_sha(sha, args.second)
    update_sha(sha, args.dt)
    img_id = pack('32s', sha.digest())

    args.output.write(img_id)
    args.output.write(pack('1024s', args.cmdline[512:].encode()))
    pad_file(args.output, args.pagesize)
    return img_id


class ValidateStrLenAction(Action):
    def __init__(self, option_strings, dest, nargs=None, **kwargs):
        if 'maxlen' not in kwargs:
            raise ValueError('maxlen must be set')
        self.maxlen = int(kwargs['maxlen'])
        del kwargs['maxlen']
        super(ValidateStrLenAction, self).__init__(option_strings, dest, **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        if len(values) > self.maxlen:
            raise ValueError('String argument too long: max {0:d}, got {1:d}'.
                format(self.maxlen, len(values)))
        setattr(namespace, self.dest, values)


def write_padded_file(f_out, f_in, padding):
    if f_in is None:
        return
    f_out.write(f_in.read())
    pad_file(f_out, padding)


def parse_int(x):
    return int(x, 0)

def parse_os_version(x):
    match = re.search(r'^(\d{1,3})(?:\.(\d{1,3})(?:\.(\d{1,3}))?)?', x)
    if match:
        a = int(match.group(1))
        b = c = 0
        if match.lastindex >= 2:
            b = int(match.group(2))
        if match.lastindex == 3:
            c = int(match.group(3))
        # 7 bits allocated for each field
        assert a < 128
        assert b < 128
        assert c < 128
        return (a << 14) | (b << 7) | c
    return 0

def parse_os_patch_level(x):
    match = re.search(r'^(\d{4})-(\d{2})-(\d{2})', x)
    if match:
        y = int(match.group(1)) - 2000
        m = int(match.group(2))
        # 7 bits allocated for the year, 4 bits for the month
        assert y >= 0 and y < 128
        assert m > 0 and m <= 12
        return (y << 4) | m
    return 0

def try_repack(name, args, dst, rtype):
    # abort if the argument does already exist and is not 'None'
    if hasattr(args, dst) and getattr(args, dst):
        return

    value = None
    if os.path.isfile(name):
        if rtype==REPACK_TYPE_FILE:
            value = name
        else:
            with open(name, 'r') as f:
                value = f.read()

            if rtype==REPACK_TYPE_VALUE_HEX:
                value = '0x'+value

    if value:
        print('set %s to %s' % (dst, value))

    setattr(args, dst, value)

def parse_repack():
    # let the original parser print the usage
    globalargs = sys.argv[1:]
    if '-h' in globalargs or '--help' in globalargs:
        return globalargs

    # parse arguments which we support replacements for
    parser = ArgumentParser()
    parser.add_argument('--kernel')
    parser.add_argument('--ramdisk')
    parser.add_argument('--second')
    parser.add_argument('--cmdline')
    parser.add_argument('--base')
    parser.add_argument('--kernel_offset')
    parser.add_argument('--ramdisk_offset')
    parser.add_argument('--second_offset')
    parser.add_argument('--os_version')
    parser.add_argument('--os_patch_level')
    parser.add_argument('--tags_offset')
    parser.add_argument('--board')
    parser.add_argument('--pagesize')
    parser.add_argument('--dt')
    parser.add_argument('-r', '--repack')
    args, newargs = parser.parse_known_args()
    prefix = args.repack

    # apply overrides
    if prefix:
        try_repack(prefix+'zImage', args, 'kernel', REPACK_TYPE_FILE)
        try_repack(prefix+'ramdisk.lz4', args, 'ramdisk', REPACK_TYPE_FILE)
        try_repack(prefix+'ramdisk.gz', args, 'ramdisk', REPACK_TYPE_FILE)
        try_repack(prefix+'second', args, 'second', REPACK_TYPE_FILE)
        try_repack(prefix+'cmdline', args, 'cmdline', REPACK_TYPE_VALUE_STR)
        try_repack(prefix+'base', args, 'base', REPACK_TYPE_VALUE_HEX)
        try_repack(prefix+'kernel_offset', args, 'kernel_offset', REPACK_TYPE_VALUE_HEX)
        try_repack(prefix+'ramdisk_offset', args, 'ramdisk_offset', REPACK_TYPE_VALUE_HEX)
        try_repack(prefix+'second_offset', args, 'second_offset', REPACK_TYPE_VALUE_HEX)
        try_repack(prefix+'os_version', args, 'os_version', REPACK_TYPE_VALUE_STR)
        try_repack(prefix+'os_patch_level', args, 'os_patch_level', REPACK_TYPE_VALUE_STR)
        try_repack(prefix+'tags_offset', args, 'tags_offset', REPACK_TYPE_VALUE_HEX)
        try_repack(prefix+'board', args, 'board', REPACK_TYPE_VALUE_STR)
        try_repack(prefix+'pagesize', args, 'pagesize', REPACK_TYPE_VALUE_STR)
        try_repack(prefix+'dt', args, 'dt', REPACK_TYPE_FILE)

    # rebuild args
    for name in vars(args):
        if name == 'repack':
            continue

        value = getattr(args, name)
        if value:
            newargs += ['--'+name, value]

    return newargs

def parse_cmdline():
    parser = ArgumentParser()
    parser.add_argument('--kernel', help='path to the kernel', type=FileType('rb'),
                        required=True)
    parser.add_argument('--ramdisk', help='path to the ramdisk', type=FileType('rb'))
    parser.add_argument('--second', help='path to the 2nd bootloader', type=FileType('rb'))
    parser.add_argument('--cmdline', help='extra arguments to be passed on the '
                        'kernel command line', default='', action=ValidateStrLenAction, maxlen=1536)
    parser.add_argument('--base', help='base address', type=parse_int, default=0x10000000)
    parser.add_argument('--kernel_offset', help='kernel offset', type=parse_int, default=0x00008000)
    parser.add_argument('--ramdisk_offset', help='ramdisk offset', type=parse_int, default=0x01000000)
    parser.add_argument('--second_offset', help='2nd bootloader offset', type=parse_int,
                        default=0x00f00000)
    parser.add_argument('--os_version', help='operating system version', type=parse_os_version,
                        default=0)
    parser.add_argument('--os_patch_level', help='operating system patch level',
                        type=parse_os_patch_level, default=0)
    parser.add_argument('--tags_offset', help='tags offset', type=parse_int, default=0x00000100)
    parser.add_argument('--board', help='board name', default='', action=ValidateStrLenAction,
                        maxlen=16)
    parser.add_argument('--pagesize', help='page size', type=parse_int,
                        choices=[2**i for i in range(11,15)], default=2048)
    parser.add_argument('--id', help='print the image ID on standard output',
                        action='store_true')
    parser.add_argument('--dt', help='path to the device tree image', type=FileType('rb'))
    parser.add_argument('-o', '--output', help='output file name', type=FileType('wb'),
                        required=True)
    # this can never happen, it's for the usage/help text only
    parser.add_argument('-r', '--repack', help='path to the unpackbootimg output directory')
    return parser.parse_args(parse_repack())


def write_data(args):
    write_padded_file(args.output, args.kernel, args.pagesize)
    write_padded_file(args.output, args.ramdisk, args.pagesize)
    write_padded_file(args.output, args.second, args.pagesize)
    write_padded_file(args.output, args.dt, args.pagesize)


def main():
    args = parse_cmdline()
    img_id = write_header(args)
    write_data(args)
    if args.id:
        if isinstance(img_id, str):
            # Python 2's struct.pack returns a string, but py3 returns bytes.
            img_id = [ord(x) for x in img_id]
        print('0x' + ''.join('{:02x}'.format(c) for c in img_id))

if __name__ == '__main__':
    main()
